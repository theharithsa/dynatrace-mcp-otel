name: 'OpenTelemetry Step Wrapper'
description: 'Wrap a step with OpenTelemetry span and log capture'
inputs:
  step-name:
    description: 'Name of the step'
    required: true
  command:
    description: 'Command to execute'
    required: true
  working-directory:
    description: 'Working directory for the command'
    required: false
    default: '.'
  dynatrace-log-url:
    description: 'Dynatrace log ingest URL'
    required: false
    default: ''
  dynatrace-api-token:
    description: 'Dynatrace API token'
    required: false
    default: ''
outputs:
  exit-code:
    description: 'Exit code of the command'
    value: ${{ steps.execute.outputs.exit-code }}
  duration:
    description: 'Duration of the step in milliseconds'
    value: ${{ steps.execute.outputs.duration }}

runs:
  using: 'composite'
  steps:
    - name: Execute step with tracing and logging
      id: execute
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        # Generate span ID for this step
        SPAN_ID=$(openssl rand -hex 8)
        START_TIME_NS=$(($(date +%s) * 1000000000))
        START_TIMESTAMP=$(date +%s%N)
        
        echo "üîÑ Starting step: ${{ inputs.step-name }}"
        echo "üìã Span ID: $SPAN_ID"
        echo "üèóÔ∏è Build type: $BUILD_TYPE"
        echo "üîó Trace ID: $GITHUB_TRACE_ID"
        echo "üîó Parent Span ID: $GITHUB_JOB_SPAN_ID"
        
        # Create log file for capturing command output
        LOG_FILE="/tmp/step_${{ inputs.step-name }}_$(date +%s).log"
        
        # Send initial log about step starting (this works)
        if [ -n "${{ inputs.dynatrace-log-url }}" ] && [ -n "${{ inputs.dynatrace-api-token }}" ]; then
          START_LOG="Starting step: ${{ inputs.step-name }} in workflow ${{ github.workflow }}"
          echo "$START_LOG" | tee -a "$LOG_FILE"
          
          LOG_TIMESTAMP=$(date +%s%3N)
          START_LOG_PAYLOAD=$(cat << EOF
          [{
            "content": "$START_LOG",
            "timestamp": $LOG_TIMESTAMP,
            "level": "INFO",
            "service": "dynatrace-mcp-server-build",
            "trace_id": "$GITHUB_TRACE_ID",
            "span_id": "$SPAN_ID",
            "github.workflow": "${{ github.workflow }}",
            "github.job": "${{ github.job }}",
            "github.step": "${{ inputs.step-name }}",
            "github.run_id": "${{ github.run_id }}",
            "github.actor": "${{ github.actor }}",
            "github.ref": "${{ github.ref }}",
            "build.type": "$BUILD_TYPE",
            "branch.name": "${{ github.ref_name }}",
            "ci.provider": "github-actions",
            "project.name": "dynatrace-mcp-server",
            "log.type": "step.start"
          }]
        EOF
          )
          
          curl -s -X POST "${{ inputs.dynatrace-log-url }}" \
            -H "Authorization: Api-Token ${{ inputs.dynatrace-api-token }}" \
            -H "Content-Type: application/json" \
            -d "$START_LOG_PAYLOAD" > /dev/null 2>&1 || true
        fi
        
        # Send step start trace using Node.js OTLP exporter
        START_SPAN_JSON=$(cat << EOF
        {
          "serviceName": "dynatrace-mcp-server-build",
          "traceId": "$GITHUB_TRACE_ID",
          "spanId": "$SPAN_ID",
          "parentSpanId": "$GITHUB_JOB_SPAN_ID",
          "name": "github.step.${{ inputs.step-name }}",
          "kind": 1,
          "startTimeUnixNano": "$START_TIME_NS",
          "statusCode": 1,
          "instrumentationScope": "github-actions-otel",
          "resourceAttributes": [
            {"key": "github.workflow", "value": "${{ github.workflow }}"},
            {"key": "github.job", "value": "${{ github.job }}"},
            {"key": "build.type", "value": "$BUILD_TYPE"},
            {"key": "github.run_id", "value": "${{ github.run_id }}"
          ],
          "attributes": [
            {"key": "step.name", "value": "${{ inputs.step-name }}"},
            {"key": "github.step", "value": "${{ inputs.step-name }}"},
            {"key": "build.type", "value": "$BUILD_TYPE"},
            {"key": "github.workflow", "value": "${{ github.workflow }}"
          ]
        }
        EOF
        )
        
        echo "üì° Sending step start trace via OTLP..."
        send-trace "$OTEL_EXPORTER_OTLP_ENDPOINT" "$DYNATRACE_API_TOKEN" "$START_SPAN_JSON" || echo "‚ö†Ô∏è Start trace failed"
        
        # Also send enhanced logs for correlation
        if [ -n "${{ inputs.dynatrace-log-url }}" ] && [ -n "${{ inputs.dynatrace-api-token }}" ]; then
          START_LOG="TRACE_START: Step ${{ inputs.step-name }} starting with span_id=$SPAN_ID, trace_id=$GITHUB_TRACE_ID, parent_span_id=$GITHUB_JOB_SPAN_ID"
          echo "$START_LOG" | tee -a "$LOG_FILE"
          
          LOG_TIMESTAMP=$(date +%s%3N)
          START_LOG_PAYLOAD=$(cat << EOF
          [{
            "content": "$START_LOG",
            "timestamp": $LOG_TIMESTAMP,
            "level": "INFO",
            "service": "dynatrace-mcp-server-build",
            "trace_id": "$GITHUB_TRACE_ID",
            "span_id": "$SPAN_ID",
            "parent_span_id": "$GITHUB_JOB_SPAN_ID",
            "span_name": "step-${{ inputs.step-name }}",
            "span_kind": "INTERNAL",
            "span_start_time_ns": "$START_TIME_NS",
            "github.workflow": "${{ github.workflow }}",
            "github.job": "${{ github.job }}",
            "github.step": "${{ inputs.step-name }}",
            "github.run_id": "${{ github.run_id }}",
            "github.actor": "${{ github.actor }}",
            "github.ref": "${{ github.ref }}",
            "build.type": "$BUILD_TYPE",
            "branch.name": "${{ github.ref_name }}",
            "ci.provider": "github-actions",
            "project.name": "dynatrace-mcp-server",
            "log.type": "span.start",
            "otel.trace_id": "$GITHUB_TRACE_ID",
            "otel.span_id": "$SPAN_ID"
          }]
        EOF
          )
          
          curl -s -X POST "${{ inputs.dynatrace-log-url }}" \
            -H "Authorization: Api-Token ${{ inputs.dynatrace-api-token }}" \
            -H "Content-Type: application/json" \
            -d "$START_LOG_PAYLOAD" > /dev/null 2>&1 || true
        fi
        
        echo "üìù Enhanced span start logged to Dynatrace"
        echo "üì° OTLP trace sent via Node.js exporter"
        echo "‚è≠Ô∏è Skipping OTLP trace - using logs for observability"
        
        # Execute command with output capture
        set +e
        ${{ inputs.command }} 2>&1 | tee -a "$LOG_FILE"
        EXIT_CODE=${PIPESTATUS[0]}
        set -e
        
        # Calculate duration
        END_TIME_NS=$(($(date +%s) * 1000000000))
        END_TIMESTAMP=$(date +%s%N)
        DURATION=$(( (END_TIMESTAMP - START_TIMESTAMP) / 1000000 ))
        
        # Determine status
        if [ $EXIT_CODE -eq 0 ]; then
          SPAN_STATUS_CODE=1
          LOG_LEVEL="INFO"
          echo "‚úÖ Step completed successfully (build: $BUILD_TYPE)"
        else
          SPAN_STATUS_CODE=2
          LOG_LEVEL="ERROR"
          echo "‚ùå Step failed with exit code: $EXIT_CODE (build: $BUILD_TYPE)"
        fi
        
        # Send completion span trace
        COMPLETION_TRACE_PAYLOAD=$(cat << EOF
        {
          "resourceSpans": [
            {
              "resource": {
                "attributes": [
                  {
                    "key": "service.name",
                    "value": {
                      "stringValue": "dynatrace-mcp-server-build"
                    }
                  },
                  {
                    "key": "telemetry.sdk.name",
                    "value": {
                      "stringValue": "opentelemetry"
                    }
                  }
                ]
              },
              "scopeSpans": [
                {
                  "scope": {
                    "name": "github-actions-otel",
                    "version": "1.0.0"
                  },
                  "spans": [
                    {
                      "traceId": "$GITHUB_TRACE_ID",
                      "spanId": "$SPAN_ID",
                      "parentSpanId": "$GITHUB_JOB_SPAN_ID",
                      "name": "github.step.${{ inputs.step-name }}",
                      "kind": 1,
                      "startTimeUnixNano": "$START_TIME_NS",
                      "endTimeUnixNano": "$END_TIME_NS",
                      "status": {
                        "code": $SPAN_STATUS_CODE
                      },
                      "attributes": [
                        {
                          "key": "step.name",
                          "value": {
                            "stringValue": "${{ inputs.step-name }}"
                          }
                        },
                        {
                          "key": "step.exit_code", 
                          "value": {
                            "intValue": $EXIT_CODE
                          }
                        },
                        {
                          "key": "step.duration_ms",
                          "value": {
                            "intValue": $DURATION
                          }
                        },
                        {
                          "key": "build.type",
                          "value": {
                            "stringValue": "$BUILD_TYPE"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
        EOF
        )
        
        echo "üì° Sending completion span trace..."
        send-trace "$OTEL_EXPORTER_OTLP_ENDPOINT" "$DYNATRACE_API_TOKEN" "$COMPLETION_TRACE_PAYLOAD" || echo "‚ö†Ô∏è Completion trace failed"
        
        # Send completion trace using Node.js OTLP exporter
        COMPLETION_SPAN_JSON=$(cat << EOF
        {
          "serviceName": "dynatrace-mcp-server-build",
          "traceId": "$GITHUB_TRACE_ID",
          "spanId": "$SPAN_ID",
          "parentSpanId": "$GITHUB_JOB_SPAN_ID",
          "name": "github.step.${{ inputs.step-name }}",
          "kind": 1,
          "startTimeUnixNano": "$START_TIME_NS",
          "endTimeUnixNano": "$END_TIME_NS",
          "statusCode": $SPAN_STATUS_CODE,
          "instrumentationScope": "github-actions-otel",
          "resourceAttributes": [
            {"key": "github.workflow", "value": "${{ github.workflow }}"},
            {"key": "github.job", "value": "${{ github.job }}"},
            {"key": "build.type", "value": "$BUILD_TYPE"},
            {"key": "github.run_id", "value": "${{ github.run_id }}"
          ],
          "attributes": [
            {"key": "step.name", "value": "${{ inputs.step-name }}"},
            {"key": "step.exit_code", "value": $EXIT_CODE, "type": "int"},
            {"key": "step.duration_ms", "value": $DURATION, "type": "int"},
            {"key": "build.type", "value": "$BUILD_TYPE"},
            {"key": "github.workflow", "value": "${{ github.workflow }}"
          ]
        }
        EOF
        )
        
        echo "üì° Sending completion trace via OTLP..."
        send-trace "$OTEL_EXPORTER_OTLP_ENDPOINT" "$DYNATRACE_API_TOKEN" "$COMPLETION_SPAN_JSON" || echo "‚ö†Ô∏è Completion trace failed"
        
        # Send enhanced completion logs for correlation
        if [ -n "${{ inputs.dynatrace-log-url }}" ] && [ -n "${{ inputs.dynatrace-api-token }}" ] && [ -f "$LOG_FILE" ]; then
          # Send span completion log first
          COMPLETION_LOG="TRACE_END: Step ${{ inputs.step-name }} completed with exit_code=$EXIT_CODE, duration_ms=$DURATION, status=$LOG_LEVEL"
          echo "$COMPLETION_LOG" >> "$LOG_FILE"
          
          LOG_TIMESTAMP=$(date +%s%3N)
          COMPLETION_LOG_PAYLOAD=$(cat << EOF
          [{
            "content": "$COMPLETION_LOG",
            "timestamp": $LOG_TIMESTAMP,
            "level": "$LOG_LEVEL",
            "service": "dynatrace-mcp-server-build",
            "trace_id": "$GITHUB_TRACE_ID",
            "span_id": "$SPAN_ID",
            "parent_span_id": "$GITHUB_JOB_SPAN_ID",
            "span_name": "step-${{ inputs.step-name }}",
            "span_kind": "INTERNAL",
            "span_start_time_ns": "$START_TIME_NS",
            "span_end_time_ns": "$END_TIME_NS",
            "span_duration_ms": "$DURATION",
            "span_status_code": "$SPAN_STATUS_CODE",
            "github.workflow": "${{ github.workflow }}",
            "github.job": "${{ github.job }}",
            "github.step": "${{ inputs.step-name }}",
            "github.run_id": "${{ github.run_id }}",
            "github.actor": "${{ github.actor }}",
            "github.ref": "${{ github.ref }}",
            "build.type": "$BUILD_TYPE",
            "branch.name": "${{ github.ref_name }}",
            "ci.provider": "github-actions",
            "project.name": "dynatrace-mcp-server",
            "step.exit_code": "$EXIT_CODE",
            "step.duration_ms": "$DURATION",
            "log.type": "span.end",
            "otel.trace_id": "$GITHUB_TRACE_ID",
            "otel.span_id": "$SPAN_ID"
          }]
        EOF
          )
          
          curl -s -X POST "${{ inputs.dynatrace-log-url }}" \
            -H "Authorization: Api-Token ${{ inputs.dynatrace-api-token }}" \
            -H "Content-Type: application/json" \
            -d "$COMPLETION_LOG_PAYLOAD" > /dev/null 2>&1 || true
          
          # Then send the full command output
          LOG_CONTENT=$(cat "$LOG_FILE" | jq -Rs .)
          LOG_TIMESTAMP=$(date +%s%3N)
          
          FINAL_LOG_PAYLOAD=$(cat << EOF
          [{
            "content": $LOG_CONTENT,
            "timestamp": $LOG_TIMESTAMP,
            "level": "$LOG_LEVEL",
            "service": "dynatrace-mcp-server-build",
            "trace_id": "$GITHUB_TRACE_ID",
            "span_id": "$SPAN_ID",
            "parent_span_id": "$GITHUB_JOB_SPAN_ID",
            "github.workflow": "${{ github.workflow }}",
            "github.job": "${{ github.job }}",
            "github.step": "${{ inputs.step-name }}",
            "github.run_id": "${{ github.run_id }}",
            "github.actor": "${{ github.actor }}",
            "github.ref": "${{ github.ref }}",
            "build.type": "$BUILD_TYPE",
            "branch.name": "${{ github.ref_name }}",
            "ci.provider": "github-actions",
            "project.name": "dynatrace-mcp-server",
            "step.exit_code": "$EXIT_CODE",
            "step.duration_ms": "$DURATION",
            "log.type": "step.output",
            "otel.trace_id": "$GITHUB_TRACE_ID",
            "otel.span_id": "$SPAN_ID"
          }]
        EOF
          )
          
          curl -s -X POST "${{ inputs.dynatrace-log-url }}" \
            -H "Authorization: Api-Token ${{ inputs.dynatrace-api-token }}" \
            -H "Content-Type: application/json" \
            -d "$FINAL_LOG_PAYLOAD" > /dev/null 2>&1 || true
          
          echo "üìù Step completion and output sent to Dynatrace logs"
          rm -f "$LOG_FILE"
        fi
        
        echo "üìù Enhanced span completion logged to Dynatrace"
        echo "üì° OTLP trace sent via Node.js exporter"
        
        # Set outputs
        echo "exit-code=$EXIT_CODE" >> $GITHUB_OUTPUT
        echo "duration=$DURATION" >> $GITHUB_OUTPUT
        
        # Preserve exit code for workflow
        exit $EXIT_CODE