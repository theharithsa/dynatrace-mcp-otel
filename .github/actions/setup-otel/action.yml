name: 'Setup OpenTelemetry'
description: 'Initialize OpenTelemetry tracing for GitHub Actions'
inputs:
  job-name:
    description: 'Name of the job for trace naming'
    required: true
  otel-endpoint:
    description: 'OTEL endpoint (OTEL_EXPORTER_OTLP_ENDPOINT)'
    required: false
    default: 'https://your-tenant.live.dynatrace.com/api/v2/otlp/v1/traces'
  dynatrace-api-token:
    description: 'Dynatrace API token (DYNATRACE_API_TOKEN)'
    required: false
  dynatrace-log-url:
    description: 'Dynatrace log ingest URL (DYNATRACE_LOG_INGEST_URL)'
    required: false
outputs:
  trace-id:
    description: 'Generated trace ID for this job'
    value: ${{ steps.init-trace.outputs.trace-id }}
  otel-endpoint:
    description: 'OTel endpoint URL'
    value: ${{ steps.init-trace.outputs.otel-endpoint }}
  build-type:
    description: 'Build type (dev or prod)'
    value: ${{ steps.init-trace.outputs.build-type }}

runs:
  using: 'composite'
  steps:
    - name: Install OpenTelemetry Node.js packages
      shell: bash
      run: |
        echo "üîß Installing OpenTelemetry packages..."
        
        # Create a temporary package.json for OTel dependencies
        cat > /tmp/package.json << 'EOF'
        {
          "name": "github-actions-otel",
          "version": "1.0.0",
          "dependencies": {
            "@opentelemetry/api": "^1.7.0",
            "@opentelemetry/sdk-node": "^0.45.0",
            "@opentelemetry/exporter-trace-otlp-proto": "^0.45.0",
            "@opentelemetry/resources": "^1.18.0",
            "@opentelemetry/semantic-conventions": "^1.18.0"
          }
        }
        EOF
        
        # Install OTel packages
        cd /tmp && npm install --no-package-lock --no-save
        
        # Create trace sending Node.js script
        cat > /tmp/send-trace.js << 'EOF'
        const { NodeSDK } = require('@opentelemetry/sdk-node');
        const { OTLPTraceExporter } = require('@opentelemetry/exporter-trace-otlp-proto');
        const { trace } = require('@opentelemetry/api');
        const { Resource } = require('@opentelemetry/resources');
        const { SemanticResourceAttributes } = require('@opentelemetry/semantic-conventions');

        async function sendTrace(endpoint, token, serviceName, traceName, attributes = {}) {
          try {
            console.log('üöÄ Initializing OpenTelemetry SDK...');
            
            const sdk = new NodeSDK({
              resource: new Resource({
                [SemanticResourceAttributes.SERVICE_NAME]: serviceName,
                [SemanticResourceAttributes.SERVICE_VERSION]: '1.0.8',
                ...attributes
              }),
              traceExporter: new OTLPTraceExporter({
                url: endpoint,
                headers: {
                  Authorization: `Api-Token ${token}`,
                },
              }),
            });

            await sdk.start();
            console.log('‚úÖ OpenTelemetry SDK started for GitHub Actions');

            const tracer = trace.getTracer('github-actions', '1.0.0');
            
            await new Promise((resolve) => {
              const span = tracer.startSpan(traceName, {
                attributes: {
                  'github.workflow': process.env.GITHUB_WORKFLOW || '',
                  'github.job': process.env.GITHUB_JOB || '',
                  'github.run_id': process.env.GITHUB_RUN_ID || '',
                  'github.actor': process.env.GITHUB_ACTOR || '',
                  'github.ref': process.env.GITHUB_REF || '',
                  ...attributes
                }
              });

              setTimeout(() => {
                span.setStatus({ code: 1 });
                span.end();
                console.log('‚úÖ Span sent successfully');
                resolve();
              }, 500);
            });

            await sdk.shutdown();
            console.log('‚úÖ OpenTelemetry SDK shutdown complete');
            
          } catch (error) {
            console.error('‚ùå Error sending trace:', error.message);
            throw error;
          }
        }

        if (require.main === module) {
          const [endpoint, token, serviceName, traceName, attributesJson] = process.argv.slice(2);
          
          if (!endpoint || !token || !serviceName || !traceName) {
            console.error('‚ùå Missing required parameters');
            process.exit(1);
          }
          
          const attributes = attributesJson ? JSON.parse(attributesJson) : {};
          
          sendTrace(endpoint, token, serviceName, traceName, attributes)
            .then(() => process.exit(0))
            .catch((error) => {
              console.error('‚ùå Failed to send trace:', error);
              process.exit(1);
            });
        }

        module.exports = { sendTrace };
        EOF
        
        echo "‚úÖ OpenTelemetry trace sender installed"

    - name: Initialize trace and logging
      id: init-trace
      shell: bash
      run: |
        echo "üîç Input parameters:"
        echo "  otel-endpoint: ${{ inputs.otel-endpoint }}"
        echo "  dynatrace-log-url: ${{ inputs.dynatrace-log-url }}"
        echo "  dynatrace-api-token: ${DYNATRACE_API_TOKEN:+SET}"
        
        if [ -z "${{ inputs.otel-endpoint }}" ] || [ "${{ inputs.otel-endpoint }}" = "https://your-tenant.live.dynatrace.com/api/v2/otlp/v1/traces" ]; then
          echo "‚ùå OTEL endpoint not properly configured!"
          exit 1
        fi
        
        if [ -z "${{ inputs.dynatrace-api-token }}" ]; then
          echo "‚ùå Dynatrace API token not provided!"
          exit 1
        fi
        
        TRACE_ID=$(openssl rand -hex 16)
        echo "trace-id=$TRACE_ID" >> $GITHUB_OUTPUT
        
        BUILD_TYPE="prod"
        case "${{ github.ref }}" in
          "refs/heads/dev") BUILD_TYPE="dev" ;;
          "refs/heads/main"|"refs/heads/master") BUILD_TYPE="prod" ;;
          *)
            case "${{ github.base_ref }}" in
              "dev") BUILD_TYPE="dev" ;;
              "main"|"master") BUILD_TYPE="prod" ;;
            esac
            ;;
        esac
        
        echo "build-type=$BUILD_TYPE" >> $GITHUB_OUTPUT
        
        OTEL_ENDPOINT="${{ inputs.otel-endpoint }}"
        echo "otel-endpoint=$OTEL_ENDPOINT" >> $GITHUB_OUTPUT
        
        echo "OTEL_EXPORTER_OTLP_ENDPOINT=$OTEL_ENDPOINT" >> $GITHUB_ENV
        echo "OTEL_SERVICE_NAME=dynatrace-mcp-server-build" >> $GITHUB_ENV
        echo "DYNATRACE_API_TOKEN=${{ inputs.dynatrace-api-token }}" >> $GITHUB_ENV
        echo "DYNATRACE_LOG_INGEST_URL=${{ inputs.dynatrace-log-url }}" >> $GITHUB_ENV
        echo "GITHUB_TRACE_ID=$TRACE_ID" >> $GITHUB_ENV
        echo "BUILD_TYPE=$BUILD_TYPE" >> $GITHUB_ENV
        
        echo "üîß OTel initialized with trace ID: $TRACE_ID"
        echo "üì° Endpoint: $OTEL_ENDPOINT"
        echo "üèóÔ∏è Build type: $BUILD_TYPE"
        echo "üåø Branch: ${{ github.ref_name }}"
        
        # Test connectivity
        cd /tmp
        export NODE_PATH="/tmp/node_modules:$NODE_PATH"
        export GITHUB_WORKFLOW="${{ github.workflow }}"
        export GITHUB_JOB="${{ inputs.job-name }}"
        export GITHUB_RUN_ID="${{ github.run_id }}"
        export GITHUB_ACTOR="${{ github.actor }}"
        export GITHUB_REF="${{ github.ref }}"
        
        echo "üì° Sending connectivity test trace..."
        if node send-trace.js \
          "$OTEL_ENDPOINT" \
          "${{ inputs.dynatrace-api-token }}" \
          "dynatrace-mcp-server-build" \
          "github-connectivity-test" \
          '{"test.type":"connectivity","build.type":"'$BUILD_TYPE'"}'; then
          echo "‚úÖ Connectivity test trace sent successfully"
        else
          echo "‚ö†Ô∏è Connectivity test trace failed"
        fi
        
        # Send initial job start log
        if [ -n "${{ inputs.dynatrace-log-url }}" ] && [ -n "${{ inputs.dynatrace-api-token }}" ]; then
          JOB_START_LOG="Starting GitHub Actions job: ${{ inputs.job-name }} for workflow ${{ github.workflow }} with trace ID: $TRACE_ID"
          LOG_TIMESTAMP=$(date +%s%3N)
          LOG_SPAN_ID=$(openssl rand -hex 8)
          
          LOG_PAYLOAD='[{"content":"'"$JOB_START_LOG"'","timestamp":'"$LOG_TIMESTAMP"',"level":"INFO","service":"dynatrace-mcp-server-build","trace_id":"'"$TRACE_ID"'","span_id":"'"$LOG_SPAN_ID"'","github.workflow":"${{ github.workflow }}","github.job":"${{ inputs.job-name }}","github.run_id":"${{ github.run_id }}","github.actor":"${{ github.actor }}","github.ref":"${{ github.ref }}","build.type":"'"$BUILD_TYPE"'","branch.name":"${{ github.ref_name }}","ci.provider":"github-actions","project.name":"dynatrace-mcp-server","log.type":"job.start"}]'
          
          LOG_STATUS=$(curl -s -w "%{http_code}" -o /tmp/log_response.txt \
            -X POST "${{ inputs.dynatrace-log-url }}" \
            -H "Authorization: Api-Token ${{ inputs.dynatrace-api-token }}" \
            -H "Content-Type: application/json" \
            -d "$LOG_PAYLOAD")
          
          if [ "$LOG_STATUS" -eq 200 ] || [ "$LOG_STATUS" -eq 204 ]; then
            echo "üìù Job start logged to Dynatrace successfully"
          else
            echo "‚ö†Ô∏è Job start log failed (HTTP $LOG_STATUS)"
          fi
        fi

    - name: Start job trace
      shell: bash
      run: |
        echo "üöÄ Starting job trace for ${{ inputs.job-name }} (build type: $BUILD_TYPE)"
        
        cd /tmp
        export NODE_PATH="/tmp/node_modules:$NODE_PATH"
        export GITHUB_WORKFLOW="${{ github.workflow }}"
        export GITHUB_JOB="${{ inputs.job-name }}"
        export GITHUB_RUN_ID="${{ github.run_id }}"
        export GITHUB_ACTOR="${{ github.actor }}"
        export GITHUB_REF="${{ github.ref }}"
        
        echo "üì° Sending job start trace..."
        if node send-trace.js \
          "$OTEL_EXPORTER_OTLP_ENDPOINT" \
          "$DYNATRACE_API_TOKEN" \
          "dynatrace-mcp-server-build" \
          "github-job-${{ inputs.job-name }}" \
          '{"job.name":"${{ inputs.job-name }}","build.type":"'$BUILD_TYPE'"}'; then
          echo "‚úÖ Job trace sent successfully using proper OTel protobuf format"
        else
          echo "‚ö†Ô∏è Job trace sending failed"
        fi
        
        echo "GITHUB_JOB_START_TIME_NS=$(($(date +%s) * 1000000000))" >> $GITHUB_ENV
        echo "üöÄ Starting job trace for ${{ inputs.job-name }} (build type: $BUILD_TYPE)"
        
        # Send job trace using proper OTel Node.js approach
        cd /tmp
        export NODE_PATH="/tmp/node_modules:$NODE_PATH"
        export GITHUB_WORKFLOW="${{ github.workflow }}"
        export GITHUB_JOB="${{ inputs.job-name }}"
        export GITHUB_RUN_ID="${{ github.run_id }}"
        export GITHUB_ACTOR="${{ github.actor }}"
        export GITHUB_REF="${{ github.ref }}"
        
        # Send job start trace
        echo "üì° Sending job start trace..."
        if node send-trace.js \
          "$OTEL_EXPORTER_OTLP_ENDPOINT" \
          "$DYNATRACE_API_TOKEN" \
          "dynatrace-mcp-server-build" \
          "github-job-${{ inputs.job-name }}" \
          '{"job.name":"${{ inputs.job-name }}","build.type":"'$BUILD_TYPE'"}'; then
          echo "‚úÖ Job trace sent successfully using proper OTel protobuf format"
        else
          echo "‚ö†Ô∏è Job trace sending failed"
        fi
        
        # Store job span info for later completion
        echo "GITHUB_JOB_START_TIME_NS=$(($(date +%s) * 1000000000))" >> $GITHUB_ENV
    - name: Start job trace
      shell: bash
      run: |
        echo "üöÄ Starting job trace for ${{ inputs.job-name }} (build type: $BUILD_TYPE)"
        
        # Send job trace using proper OTel Node.js approach
        cd /tmp
        export NODE_PATH="/tmp/node_modules:$NODE_PATH"
        export GITHUB_WORKFLOW="${{ github.workflow }}"
        export GITHUB_JOB="${{ inputs.job-name }}"
        export GITHUB_RUN_ID="${{ github.run_id }}"
        export GITHUB_ACTOR="${{ github.actor }}"
        export GITHUB_REF="${{ github.ref }}"
        
        # Send job start trace
        echo "üì° Sending job start trace..."
        if node send-trace.js \
          "$OTEL_EXPORTER_OTLP_ENDPOINT" \
          "$DYNATRACE_API_TOKEN" \
          "dynatrace-mcp-server-build" \
          "github-job-${{ inputs.job-name }}" \
          '{"job.name":"${{ inputs.job-name }}","build.type":"'$BUILD_TYPE'"}'; then
          echo "‚úÖ Job trace sent successfully using proper OTel protobuf format"
        else
          echo "‚ö†Ô∏è Job trace sending failed"
        fi
        
        # Store job span info for later completion
        echo "GITHUB_JOB_START_TIME_NS=$(($(date +%s) * 1000000000))" >> $GITHUB_ENV
            "github.job": "${{ inputs.job-name }}",
            "github.run_id": "${{ github.run_id }}",
            "github.actor": "${{ github.actor }}",
            "github.ref": "${{ github.ref }}",
            "build.type": "$BUILD_TYPE",
            "branch.name": "${{ github.ref_name }}",
            "ci.provider": "github-actions",
            "project.name": "dynatrace-mcp-server",
            "log.type": "job.start"
          }]
        EOF
          )
          
          LOG_STATUS=$(curl -s -w "%{http_code}" -o /tmp/log_response.txt \
            -X POST "${{ inputs.dynatrace-log-url }}" \
            -H "Authorization: Api-Token ${{ inputs.dynatrace-api-token }}" \
            -H "Content-Type: application/json" \
            -d "$JOB_LOG_PAYLOAD")
          
          if [ "$LOG_STATUS" -eq 200 ] || [ "$LOG_STATUS" -eq 204 ]; then
            echo "üìù Job start logged to Dynatrace successfully"
          else
            echo "‚ö†Ô∏è Job start log failed (HTTP $LOG_STATUS):"
            cat /tmp/log_response.txt 2>/dev/null || echo "No response"
          fi
          rm -f /tmp/log_response.txt
        fi

    - name: Start job trace
      shell: bash
      run: |
        echo "üöÄ Starting job trace for ${{ inputs.job-name }} (build type: $BUILD_TYPE)"
        
        CURRENT_TIME_NS=$(($(date +%s) * 1000000000))
        JOB_SPAN_ID=$(openssl rand -hex 8)
        
        # Use proper OTLP v1.0.0 format for job span
        JOB_TRACE_PAYLOAD=$(cat << EOF
        {
          "resourceSpans": [
            {
              "resource": {
                "attributes": [
                  {
                    "key": "service.name",
                    "value": {
                      "stringValue": "dynatrace-mcp-server-build"
                    }
                  },
                  {
                    "key": "build.type",
                    "value": {
                      "stringValue": "$BUILD_TYPE"
                    }
                  },
                  {
                    "key": "github.workflow",
                    "value": {
                      "stringValue": "${{ github.workflow }}"
                    }
                  },
                  {
                    "key": "github.run_id",
                    "value": {
                      "stringValue": "${{ github.run_id }}"
                    }
                  }
                ]
              },
              "scopeSpans": [
                {
                  "scope": {
                    "name": "github-actions-otel",
                    "version": "1.0.0"
                  },
                  "spans": [
                    {
                      "traceId": "$GITHUB_TRACE_ID",
                      "spanId": "$JOB_SPAN_ID",
                      "name": "github-job-${{ inputs.job-name }}",
                      "kind": 3,
                      "startTimeUnixNano": "$CURRENT_TIME_NS",
                      "status": {
                        "code": 1
                      },
                      "attributes": [
                        {
                          "key": "job.name",
                          "value": {
                            "stringValue": "${{ inputs.job-name }}"
                          }
                        },
                        {
                          "key": "github.actor",
                          "value": {
                            "stringValue": "${{ github.actor }}"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
        EOF
        )
        
        # Send job trace
        if send-trace "$OTEL_EXPORTER_OTLP_ENDPOINT" "$DYNATRACE_API_TOKEN" "$JOB_TRACE_PAYLOAD"; then
          echo "‚úÖ Job trace sent successfully"
        else
          echo "‚ö†Ô∏è Job trace sending failed"
        fi
        
        # Store job span info for later completion
        echo "GITHUB_JOB_SPAN_ID=$JOB_SPAN_ID" >> $GITHUB_ENV
        echo "GITHUB_JOB_START_TIME_NS=$CURRENT_TIME_NS" >> $GITHUB_ENV
