name: 'Setup OpenTelemetry'
description: 'Initialize OpenTelemetry tracing for GitHub Actions'
inputs:
  job-name:
    description: 'Name of the job for trace naming'
    required: true
  otel-endpoint:
    description: 'OTEL endpoint (OTEL_EXPORTER_OTLP_ENDPOINT)'
    required: false
    default: 'https://your-tenant.live.dynatrace.com/api/v2/otlp/v1/traces'
  dynatrace-api-token:
    description: 'Dynatrace API token (DYNATRACE_API_TOKEN)'
    required: false
  dynatrace-log-url:
    description: 'Dynatrace log ingest URL (DYNATRACE_LOG_INGEST_URL)'
    required: false
outputs:
  trace-id:
    description: 'Generated trace ID for this job'
    value: ${{ steps.init-trace.outputs.trace-id }}
  otel-endpoint:
    description: 'OTel endpoint URL'
    value: ${{ steps.init-trace.outputs.otel-endpoint }}
  build-type:
    description: 'Build type (dev or prod)'
    value: ${{ steps.init-trace.outputs.build-type }}

runs:
  using: 'composite'
  steps:
    - name: Install trace sending utilities
      shell: bash
      run: |
        echo "🔧 Installing trace utilities..."
        
        # Install required tools
        sudo apt-get update
        sudo apt-get install -y jq curl
        
        # Install Node.js OpenTelemetry packages for trace sending
        cd ${{ github.workspace }}/.github/scripts
        npm init -y > /dev/null 2>&1 || true
        npm install @opentelemetry/exporter-trace-otlp-proto @opentelemetry/resources @opentelemetry/semantic-conventions --save --silent
        
        # Create a comprehensive trace sending function that uses Node.js
        sudo tee /usr/local/bin/send-trace > /dev/null << 'EOF'
        #!/bin/bash
        # OTLP trace sender using Node.js (same as otel.ts)
        
        TRACE_ENDPOINT="$1"
        API_TOKEN="$2"
        SPAN_JSON="$3"
        
        if [ -z "$TRACE_ENDPOINT" ] || [ -z "$API_TOKEN" ] || [ -z "$SPAN_JSON" ]; then
          echo "❌ Missing required parameters for trace sending"
          exit 1
        fi
        
        echo "📡 Sending OTLP trace to: $TRACE_ENDPOINT"
        echo "🔍 Using Node.js OTLP protobuf exporter (same as otel.ts)"
        
        # Use the Node.js script that mimics otel.ts behavior
        cd "$GITHUB_WORKSPACE/.github/scripts"
        if node send-trace.js "$TRACE_ENDPOINT" "$API_TOKEN" "$SPAN_JSON"; then
          echo "✅ OTLP trace sent successfully"
          exit 0
        else
          echo "⚠️ OTLP trace sending failed, but continuing..."
          exit 0  # Don't fail the workflow
        fi
        EOF
        
        sudo chmod +x /usr/local/bin/send-trace
        echo "✅ Trace utilities installed with Node.js OTLP support"

    - name: Initialize trace and logging
      id: init-trace
      shell: bash
      run: |
        # Debug input parameters
        echo "🔍 Input parameters:"
        echo "  otel-endpoint: ${{ inputs.otel-endpoint }}"
        echo "  dynatrace-log-url: ${{ inputs.dynatrace-log-url }}"
        echo "  dynatrace-api-token: ${DYNATRACE_API_TOKEN:+SET}"
        
        # Validate required inputs
        if [ -z "${{ inputs.otel-endpoint }}" ] || [ "${{ inputs.otel-endpoint }}" = "https://your-tenant.live.dynatrace.com/api/v2/otlp/v1/traces" ]; then
          echo "❌ OTEL endpoint not properly configured!"
          echo "Please set OTEL_EXPORTER_OTLP_ENDPOINT in your environment variables"
          exit 1
        fi
        
        if [ -z "${{ inputs.dynatrace-api-token }}" ]; then
          echo "❌ Dynatrace API token not provided!"
          echo "Please set DYNATRACE_API_TOKEN in your environment secrets"
          exit 1
        fi
        
        # Generate a unique trace ID for this job
        TRACE_ID=$(openssl rand -hex 16)
        echo "trace-id=$TRACE_ID" >> $GITHUB_OUTPUT
        
        # Determine build type based on branch
        BUILD_TYPE="prod"
        case "${{ github.ref }}" in
          "refs/heads/dev")
            BUILD_TYPE="dev"
            ;;
          "refs/heads/main"|"refs/heads/master")
            BUILD_TYPE="prod"
            ;;
          *)
            # For PRs, check the base branch
            case "${{ github.base_ref }}" in
              "dev")
                BUILD_TYPE="dev"
                ;;
              "main"|"master")
                BUILD_TYPE="prod"
                ;;
            esac
            ;;
        esac
        
        echo "build-type=$BUILD_TYPE" >> $GITHUB_OUTPUT
        
        # Set up OTel environment variables using exact .env names
        OTEL_ENDPOINT="${{ inputs.otel-endpoint }}"
        echo "otel-endpoint=$OTEL_ENDPOINT" >> $GITHUB_OUTPUT
        
        # Export environment variables for subsequent steps (matching .env file names)
        echo "OTEL_EXPORTER_OTLP_ENDPOINT=$OTEL_ENDPOINT" >> $GITHUB_ENV
        echo "OTEL_EXPORTER_OTLP_HEADERS=Authorization=Api-Token ${{ inputs.dynatrace-api-token }}" >> $GITHUB_ENV
        echo "OTEL_SERVICE_NAME=dynatrace-mcp-server-build" >> $GITHUB_ENV
        echo "DYNATRACE_API_TOKEN=${{ inputs.dynatrace-api-token }}" >> $GITHUB_ENV
        echo "DYNATRACE_LOG_INGEST_URL=${{ inputs.dynatrace-log-url }}" >> $GITHUB_ENV
        echo "OTEL_RESOURCE_ATTRIBUTES=github.workflow=${{ github.workflow }},github.job=${{ inputs.job-name }},github.run_id=${{ github.run_id }},github.actor=${{ github.actor }},build.type=$BUILD_TYPE,branch.name=${{ github.ref_name }},branch.ref=${{ github.ref }}" >> $GITHUB_ENV
        echo "GITHUB_TRACE_ID=$TRACE_ID" >> $GITHUB_ENV
        echo "BUILD_TYPE=$BUILD_TYPE" >> $GITHUB_ENV
        
        echo "🔧 OTel initialized with trace ID: $TRACE_ID"
        echo "📡 Endpoint: $OTEL_ENDPOINT"
        echo "📝 Log URL: ${{ inputs.dynatrace-log-url }}"
        echo "🏗️ Build type: $BUILD_TYPE"
        echo "🌿 Branch: ${{ github.ref_name }}"
        
        # Test connectivity to Dynatrace OTLP endpoint using Node.js
        echo "🧪 Testing Dynatrace OTLP connectivity with Node.js exporter..."
        
        CURRENT_TIME_NS=$(($(date +%s) * 1000000000))
        TEST_SPAN_ID=$(openssl rand -hex 8)
        
        # Create span data in the format expected by our Node.js script
        TEST_SPAN_JSON=$(cat << EOF
        {
          "serviceName": "dynatrace-mcp-server-build",
          "traceId": "$TRACE_ID",
          "spanId": "$TEST_SPAN_ID",
          "name": "github.connectivity.test",
          "kind": 1,
          "startTimeUnixNano": "$CURRENT_TIME_NS",
          "endTimeUnixNano": "$((CURRENT_TIME_NS + 1000000000))",
          "statusCode": 1,
          "resourceAttributes": [
            {"key": "github.workflow", "value": "${{ github.workflow }}"},
            {"key": "build.type", "value": "$BUILD_TYPE"}
          ],
          "attributes": [
            {"key": "test.type", "value": "connectivity"},
            {"key": "build.type", "value": "$BUILD_TYPE"}
          ]
        }
        EOF
        )
        
        # Send test trace using Node.js (same approach as otel.ts)
        if send-trace "$OTEL_ENDPOINT" "${{ inputs.dynatrace-api-token }}" "$TEST_SPAN_JSON"; then
          echo "✅ OTLP trace connectivity test successful"
        else
          echo "⚠️ OTLP trace connectivity test failed, but continuing..."
        fi

        # Send initial job start log to Dynatrace (this is working)
        if [ -n "${{ inputs.dynatrace-log-url }}" ] && [ -n "${{ inputs.dynatrace-api-token }}" ]; then
          JOB_START_LOG="Starting GitHub Actions job: ${{ inputs.job-name }} for workflow ${{ github.workflow }} with trace ID: $TRACE_ID"
          LOG_TIMESTAMP=$(date +%s%3N)
          
          JOB_LOG_PAYLOAD=$(cat << EOF
          [{
            "content": "$JOB_START_LOG",
            "timestamp": $LOG_TIMESTAMP,
            "level": "INFO",
            "service": "dynatrace-mcp-server-build",
            "trace_id": "$TRACE_ID",
            "span_id": "$TEST_SPAN_ID",
            "github.workflow": "${{ github.workflow }}",
            "github.job": "${{ inputs.job-name }}",
            "github.run_id": "${{ github.run_id }}",
            "github.actor": "${{ github.actor }}",
            "github.ref": "${{ github.ref }}",
            "build.type": "$BUILD_TYPE",
            "branch.name": "${{ github.ref_name }}",
            "ci.provider": "github-actions",
            "project.name": "dynatrace-mcp-server",
            "log.type": "job.start"
          }]
        EOF
          )
          
          LOG_STATUS=$(curl -s -w "%{http_code}" -o /tmp/log_response.txt \
            -X POST "${{ inputs.dynatrace-log-url }}" \
            -H "Authorization: Api-Token ${{ inputs.dynatrace-api-token }}" \
            -H "Content-Type: application/json" \
            -d "$JOB_LOG_PAYLOAD")
          
          if [ "$LOG_STATUS" -eq 200 ] || [ "$LOG_STATUS" -eq 204 ]; then
            echo "📝 Job start logged to Dynatrace successfully"
          else
            echo "⚠️ Job start log failed (HTTP $LOG_STATUS):"
            cat /tmp/log_response.txt 2>/dev/null || echo "No response"
          fi
          rm -f /tmp/log_response.txt
        fi

    - name: Start job trace
      shell: bash
      run: |
        echo "🚀 Starting job trace for ${{ inputs.job-name }} (build type: $BUILD_TYPE)"
        
        CURRENT_TIME_NS=$(($(date +%s) * 1000000000))
        JOB_SPAN_ID=$(openssl rand -hex 8)
        
        # Create job span data for Node.js trace sender
        JOB_SPAN_JSON=$(cat << EOF
        {
          "serviceName": "dynatrace-mcp-server-build",
          "traceId": "$GITHUB_TRACE_ID",
          "spanId": "$JOB_SPAN_ID",
          "name": "github.job.${{ inputs.job-name }}",
          "kind": 1,
          "startTimeUnixNano": "$CURRENT_TIME_NS",
          "statusCode": 1,
          "resourceAttributes": [
            {"key": "github.workflow", "value": "${{ github.workflow }}"},
            {"key": "github.run_id", "value": "${{ github.run_id }}"},
            {"key": "build.type", "value": "$BUILD_TYPE"}
          ],
          "attributes": [
            {"key": "job.name", "value": "${{ inputs.job-name }}"},
            {"key": "github.actor", "value": "${{ github.actor }}"},
            {"key": "build.type", "value": "$BUILD_TYPE"}
          ]
        }
        EOF
        )
        
        # Send job trace using Node.js OTLP exporter
        if send-trace "$OTEL_EXPORTER_OTLP_ENDPOINT" "$DYNATRACE_API_TOKEN" "$JOB_SPAN_JSON"; then
          echo "✅ Job trace sent successfully via OTLP"
        else
          echo "⚠️ Job trace sending failed"
        fi
        
        # Store job span info for later completion
        echo "GITHUB_JOB_SPAN_ID=$JOB_SPAN_ID" >> $GITHUB_ENV
        echo "GITHUB_JOB_START_TIME_NS=$CURRENT_TIME_NS" >> $GITHUB_ENV