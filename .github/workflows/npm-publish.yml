name: Publish to NPM

on:
  push:
    branches: [main, master, dev]
  pull_request:
    branches: [main, master, dev]
    types: [opened, synchronize, closed]
  workflow_dispatch:
    inputs:
      force_publish:
        description: 'Force publish even if version unchanged'
        required: false
        default: 'false'
        type: boolean

# Add permissions for GitHub token
permissions:
  contents: write  # Required for creating releases
  packages: write  # Optional, for GitHub Packages
  pull-requests: read  # Required for PR events

jobs:
  debug-info:
    runs-on: ubuntu-latest
    environment: NPM Deploy  # Add environment access
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug GitHub Context
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Base ref: ${{ github.base_ref }}"
          echo "Head ref: ${{ github.head_ref }}"
          echo "PR merged: ${{ github.event.pull_request.merged }}"
          echo "PR action: ${{ github.event.action }}"
          echo "Repository: ${{ github.repository }}"
          echo "Actor: ${{ github.actor }}"
          echo "SHA: ${{ github.sha }}"

  check-version:
    runs-on: ubuntu-latest
    environment: NPM Deploy  # Add environment access
    outputs:
      version-changed: ${{ steps.version-check.outputs.changed }}
      new-version: ${{ steps.version-check.outputs.version }}
      should-publish: ${{ steps.version-check.outputs.should_publish }}
      target-branch: ${{ steps.version-check.outputs.target_branch }}
      package-name: ${{ steps.version-check.outputs.package_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0


      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Check if version changed and determine publish strategy
        id: version-check
        run: |
          # Get current version and base package name
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          BASE_PACKAGE_NAME=$(node -p "require('./package.json').name")
          echo "üì¶ Current version: $CURRENT_VERSION"
          echo "üì¶ Base package name: $BASE_PACKAGE_NAME"
          
          # Initialize variables
          VERSION_CHANGED="false"
          SHOULD_PUBLISH="false"
          TARGET_BRANCH=""
          PACKAGE_NAME=""
          
          # Determine target branch and package name
          if [ "${{ github.event_name }}" = "push" ]; then
            case "${{ github.ref }}" in
              "refs/heads/main"|"refs/heads/master")
                TARGET_BRANCH="main"
                PACKAGE_NAME="$BASE_PACKAGE_NAME"
                echo "üéØ Target: Main branch push (NO PUBLISH - only on PR merge)"
                ;;
              "refs/heads/dev")
                TARGET_BRANCH="dev"
                PACKAGE_NAME="${BASE_PACKAGE_NAME}-dev"
                echo "üéØ Target: Dev branch push (dev package)"
                ;;
              *)
                echo "‚ùå Unsupported branch: ${{ github.ref }}"
                ;;
            esac
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            case "${{ github.base_ref }}" in
              "main"|"master")
                TARGET_BRANCH="main"
                PACKAGE_NAME="$BASE_PACKAGE_NAME"
                if [ "${{ github.event.action }}" = "closed" ] && [ "${{ github.event.pull_request.merged }}" = "true" ]; then
                  echo "üéØ Target: PR merged to main (production package)"
                else
                  echo "üéØ Target: PR to main (NO PUBLISH - only on merge)"
                fi
                ;;
              "dev")
                TARGET_BRANCH="dev"
                PACKAGE_NAME="${BASE_PACKAGE_NAME}-dev"
                echo "üéØ Target: PR to dev (dev package)"
                ;;
              *)
                echo "‚ùå Unsupported base branch: ${{ github.base_ref }}"
                ;;
            esac
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TARGET_BRANCH="manual"
            PACKAGE_NAME="$BASE_PACKAGE_NAME"
            echo "üéØ Target: Manual trigger"
          fi
          
          # Check for manual force publish
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.force_publish }}" = "true" ]; then
            echo "üîß Manual force publish triggered"
            VERSION_CHANGED="true"
            SHOULD_PUBLISH="true"
          else
            # Check if we can compare with previous commit
            if git show HEAD~1:package.json > /tmp/prev_package.json 2>/dev/null; then
              PREVIOUS_VERSION=$(node -p "JSON.parse(require('fs').readFileSync('/tmp/prev_package.json', 'utf8')).version")
              echo "üì¶ Previous version: $PREVIOUS_VERSION"
              
              if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
                echo "‚úÖ Version changed: $PREVIOUS_VERSION ‚Üí $CURRENT_VERSION"
                VERSION_CHANGED="true"
              else
                echo "‚ùå Version unchanged: $CURRENT_VERSION"
                VERSION_CHANGED="false"
              fi
            else
              echo "üÜï No previous version found (first commit or new file)"
              VERSION_CHANGED="true"
            fi
            
            # Determine if we should publish based on branch-specific rules
            if [ "$VERSION_CHANGED" = "true" ] && [ -n "$TARGET_BRANCH" ]; then
              if [ "$TARGET_BRANCH" = "main" ]; then
                # Main branch: Only publish when PR is merged
                if [ "${{ github.event_name }}" = "pull_request" ] && [ "${{ github.event.action }}" = "closed" ] && [ "${{ github.event.pull_request.merged }}" = "true" ]; then
                  echo "‚úÖ Main branch: PR merged detected"
                  SHOULD_PUBLISH="true"
                else
                  echo "‚ùå Main branch: Only merged PRs allowed, got event=${{ github.event_name }}, action=${{ github.event.action }}, merged=${{ github.event.pull_request.merged }}"
                  SHOULD_PUBLISH="false"
                fi
              elif [ "$TARGET_BRANCH" = "dev" ]; then
                # Dev branch: Publish on both push and PR (but not on PR close unless merged)
                if [ "${{ github.event_name }}" = "push" ]; then
                  echo "‚úÖ Dev branch: Direct push detected"
                  SHOULD_PUBLISH="true"
                elif [ "${{ github.event_name }}" = "pull_request" ]; then
                  if [ "${{ github.event.action }}" = "closed" ]; then
                    if [ "${{ github.event.pull_request.merged }}" = "true" ]; then
                      echo "‚úÖ Dev branch: PR merged detected"
                      SHOULD_PUBLISH="true"
                    else
                      echo "‚ùå Dev branch: PR closed but not merged"
                      SHOULD_PUBLISH="false"
                    fi
                  else
                    echo "‚úÖ Dev branch: PR opened/updated"
                    SHOULD_PUBLISH="true"
                  fi
                else
                  echo "‚ùå Dev branch: Unexpected event ${{ github.event_name }}"
                  SHOULD_PUBLISH="false"
                fi
              fi
            else
              echo "‚ùå Publishing conditions not met"
              SHOULD_PUBLISH="false"
            fi
          fi
          
          # Set outputs
          echo "changed=$VERSION_CHANGED" >> $GITHUB_OUTPUT
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "should_publish=$SHOULD_PUBLISH" >> $GITHUB_OUTPUT
          echo "target_branch=$TARGET_BRANCH" >> $GITHUB_OUTPUT
          echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT

  test:
    runs-on: ubuntu-latest
    environment: NPM Deploy  # Add environment access
    if: |
      !(github.event_name == 'pull_request' && 
        github.event.action == 'closed' && 
        github.event.pull_request.merged != true)
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: 'npm ci'

      - name: Run build
        run: 'npm run build'

      - name: Run tests
        run: 'npm test --if-present'

      - name: Check TypeScript compilation
        run: 'npx tsc --noEmit'

  publish:
    needs: [check-version, test, debug-info]
    runs-on: ubuntu-latest
    environment: NPM Deploy  # Already has environment access
    if: needs.check-version.outputs.should-publish == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4


      - name: Publishing Info
        run: |
          echo "üéâ All conditions met - proceeding with publish!"
          echo "Package name: ${{ needs.check-version.outputs.package-name }}"
          echo "Version: ${{ needs.check-version.outputs.new-version }}"
          echo "Target branch: ${{ needs.check-version.outputs.target-branch }}"
          echo "Event: ${{ github.event_name }}"
          echo "Action: ${{ github.event.action }}"
          echo "Environment: NPM Deploy"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Install dependencies
        run: 'npm ci'

      - name: Build project
        run: 'npm run build'

      - name: Update package name for dev builds
        if: needs.check-version.outputs.target-branch == 'dev'
        run: |
          echo "üìù Updating package name to: ${{ needs.check-version.outputs.package-name }}"
          node -e "
            const pkg = require('./package.json');
            pkg.name = '${{ needs.check-version.outputs.package-name }}';
            require('fs').writeFileSync('./package.json', JSON.stringify(pkg, null, 2));
          "

      - name: Verify package contents
        run: |
          echo "üì¶ Package contents that will be published:"
          npm pack --dry-run
          echo ""
          echo "üìã Final package.json name:"
          node -p "require('./package.json').name"

      - name: Configure NPM authentication
        run: |
          echo "üîß Configuring NPM authentication..."
          echo "//registry.npmjs.org/:_authToken=$NODE_AUTH_TOKEN" > ~/.npmrc
          echo "registry=https://registry.npmjs.org/" >> ~/.npmrc
          echo "always-auth=true" >> ~/.npmrc
          npm whoami
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish to NPM
        run: |
          echo "üöÄ Publishing ${{ needs.check-version.outputs.package-name }}@${{ needs.check-version.outputs.new-version }} to NPM..."
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Extract changelog content
        id: changelog
        run: |
          echo "üìù Extracting changelog for version ${{ needs.check-version.outputs.new-version }}"
          
          # Extract changelog content for this version
          IS_DEV=${{ needs.check-version.outputs.target-branch == 'dev' }}
          CHANGELOG_CONTENT=$(node .github/scripts/extract-changelog.js "${{ needs.check-version.outputs.new-version }}" "$IS_DEV")
          
          # Save to file for GitHub release
          echo "$CHANGELOG_CONTENT" > /tmp/release_notes.md
          
          # Also output for debugging
          echo "üìã Release notes content:"
          cat /tmp/release_notes.md

      - name: Create GitHub Release with Changelog
        run: |
          echo "üè∑Ô∏è Creating GitHub release with changelog content..."
          
          # Create release with changelog content
          gh release create "v${{ needs.check-version.outputs.new-version }}-${{ needs.check-version.outputs.target-branch }}" \
            --title "${{ needs.check-version.outputs.target-branch == 'dev' && 'Development Release' || 'Production Release' }} v${{ needs.check-version.outputs.new-version }}" \
            --notes-file "/tmp/release_notes.md" \
            ${{ needs.check-version.outputs.target-branch == 'dev' && '--prerelease' || '' }}
          
          echo "‚úÖ GitHub release created with changelog content"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-skipped:
    needs: [check-version, debug-info]
    runs-on: ubuntu-latest
    environment: NPM Deploy  # Add environment access
    if: needs.check-version.outputs.should-publish != 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4


      - name: Publish Skipped Info
        run: |
          echo "‚ùå Publish was skipped. Reasons:"
          echo "   Version changed: ${{ needs.check-version.outputs.version-changed }}"
          echo "   Should publish: ${{ needs.check-version.outputs.should-publish }}"
          echo "   Target branch: ${{ needs.check-version.outputs.target-branch }}"
          echo "   Event type: ${{ github.event_name }}"
          echo "   Event action: ${{ github.event.action }}"
          echo "   PR merged: ${{ github.event.pull_request.merged }}"
          echo "   Package name: ${{ needs.check-version.outputs.package-name }}"
          echo ""
          echo "üí° Publishing rules:"
          echo "   üì¶ Dev branch: Publishes on PR open/update/merge and push as 'dynatrace-mcp-server-dev'"
          echo "   üì¶ Main branch: ONLY publishes when PR is approved and merged as 'dynatrace-mcp-server'"