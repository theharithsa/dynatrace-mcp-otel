name: Publish to NPM

on:
  push:
    branches: [main, master, dev]
  pull_request:
    branches: [main, master, dev]
  workflow_dispatch:  # Allow manual trigger
    inputs:
      force_publish:
        description: 'Force publish even if version unchanged'
        required: false
        default: 'false'
        type: boolean

jobs:
  debug-info:
    runs-on: ubuntu-latest
    steps:
      - name: Debug GitHub Context
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Actor: ${{ github.actor }}"
          echo "SHA: ${{ github.sha }}"

  check-version:
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.version-check.outputs.changed }}
      new-version: ${{ steps.version-check.outputs.version }}
      should-publish: ${{ steps.version-check.outputs.should_publish }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Check if version changed
        id: version-check
        run: |
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "📦 Current version: $CURRENT_VERSION"
          
          # Initialize variables
          VERSION_CHANGED="false"
          SHOULD_PUBLISH="false"
          
          # Check for manual force publish
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.force_publish }}" = "true" ]; then
            echo "🔧 Manual force publish triggered"
            VERSION_CHANGED="true"
            SHOULD_PUBLISH="true"
          else
            # Check if we can compare with previous commit
            if git show HEAD~1:package.json > /tmp/prev_package.json 2>/dev/null; then
              PREVIOUS_VERSION=$(node -p "JSON.parse(require('fs').readFileSync('/tmp/prev_package.json', 'utf8')).version")
              echo "📦 Previous version: $PREVIOUS_VERSION"
              
              if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
                echo "✅ Version changed: $PREVIOUS_VERSION → $CURRENT_VERSION"
                VERSION_CHANGED="true"
              else
                echo "❌ Version unchanged: $CURRENT_VERSION"
                VERSION_CHANGED="false"
              fi
            else
              echo "🆕 No previous version found (first commit or new file)"
              VERSION_CHANGED="true"
            fi
            
            # Check if we should publish based on conditions
            if [ "$VERSION_CHANGED" = "true" ] && [ "${{ github.event_name }}" = "push" ]; then
              case "${{ github.ref }}" in
                "refs/heads/main"|"refs/heads/master"|"refs/heads/dev")
                  echo "✅ Publishing conditions met"
                  SHOULD_PUBLISH="true"
                  ;;
                *)
                  echo "❌ Wrong branch for publishing: ${{ github.ref }}"
                  SHOULD_PUBLISH="false"
                  ;;
              esac
            else
              echo "❌ Publishing conditions not met"
              SHOULD_PUBLISH="false"
            fi
          fi
          
          # Set outputs
          echo "changed=$VERSION_CHANGED" >> $GITHUB_OUTPUT
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "should_publish=$SHOULD_PUBLISH" >> $GITHUB_OUTPUT
          
          # Final summary
          echo "🎯 Final decision:"
          echo "   Version changed: $VERSION_CHANGED"
          echo "   Should publish: $SHOULD_PUBLISH"
          echo "   Event: ${{ github.event_name }}"
          echo "   Branch: ${{ github.ref }}"

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run build
        run: npm run build

      - name: Run tests (if any)
        run: npm test --if-present

      - name: Check TypeScript compilation
        run: npx tsc --noEmit

  publish:
    needs: [check-version, test, debug-info]
    runs-on: ubuntu-latest
    if: needs.check-version.outputs.should-publish == 'true'
    steps:
      - name: 🚀 Publishing to NPM
        run: |
          echo "🎉 All conditions met - proceeding with publish!"
          echo "Version: ${{ needs.check-version.outputs.new-version }}"
          echo "Version changed: ${{ needs.check-version.outputs.version-changed }}"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Verify package contents
        run: |
          echo "📦 Package contents that will be published:"
          npm pack --dry-run

      - name: Publish to NPM
        run: |
          echo "🚀 Publishing version ${{ needs.check-version.outputs.new-version }} to NPM..."
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.check-version.outputs.new-version }}
          release_name: Release v${{ needs.check-version.outputs.new-version }}
          body: |
            ## 🎉 New Release: v${{ needs.check-version.outputs.new-version }}
            
            This version has been automatically published to NPM.
            
            ### 📦 Installation
            ```bash
            npm install dynatrace-mcp-server@${{ needs.check-version.outputs.new-version }}
            ```
            
            ### 📋 Changes
            See [CHANGELOG.md](CHANGELOG.md) for detailed changes.
          draft: false
          prerelease: false

  publish-skipped:
    needs: [check-version, debug-info]
    runs-on: ubuntu-latest
    if: needs.check-version.outputs.should-publish != 'true'
    steps:
      - name: ⏭️ Publish Skipped
        run: |
          echo "❌ Publish was skipped. Reasons:"
          echo "   Version changed: ${{ needs.check-version.outputs.version-changed }}"
          echo "   Should publish: ${{ needs.check-version.outputs.should-publish }}"
          echo "   Event type: ${{ github.event_name }}"
          echo "   Branch: ${{ github.ref }}"
          echo ""
          echo "💡 To trigger a publish:"
          echo "   1. Increment version: npm version patch/minor/major"
          echo "   2. Push to dev/main/master branch"
          echo "   3. Or trigger workflow manually with force_publish=true"