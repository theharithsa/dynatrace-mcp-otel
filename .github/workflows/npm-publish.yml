name: Publish to NPM

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.version-check.outputs.changed }}
      new-version: ${{ steps.version-check.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history to compare versions

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Check if version changed
        id: version-check
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Check if this is the first commit or if package.json existed before
          if git rev-parse HEAD~1 >/dev/null 2>&1 && git show HEAD~1:package.json >/dev/null 2>&1; then
            # Get previous version from package.json
            PREVIOUS_VERSION=$(git show HEAD~1:package.json | node -p "JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf8')).version")
            echo "Previous version: $PREVIOUS_VERSION"
            
            if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
              echo "✅ Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
              echo "changed=true" >> $GITHUB_OUTPUT
            else
              echo "❌ Version unchanged: $CURRENT_VERSION"
              echo "changed=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "✅ First commit or new package.json, treating as version change"
            echo "changed=true" >> $GITHUB_OUTPUT
          fi
          
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Debug outputs
        run: |
          echo "Version changed: ${{ steps.version-check.outputs.changed }}"
          echo "New version: ${{ steps.version-check.outputs.version }}"
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run build
        run: npm run build

      - name: Run tests (if any)
        run: npm test --if-present

      - name: Check TypeScript compilation
        run: npx tsc --noEmit

  publish:
    needs: [check-version, test]
    runs-on: ubuntu-latest
    if: needs.check-version.outputs.version-changed == 'true' && github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
      - name: Debug conditions
        run: |
          echo "Version changed: ${{ needs.check-version.outputs.version-changed }}"
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Should publish: ${{ needs.check-version.outputs.version-changed == 'true' && github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') }}"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Publish to NPM
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.check-version.outputs.new-version }}
          release_name: Release v${{ needs.check-version.outputs.new-version }}
          body: |
            ## Changes
            
            Version ${{ needs.check-version.outputs.new-version }} has been published to NPM.
            
            ### Installation
            ```bash
            npm install dynatrace-mcp-server@${{ needs.check-version.outputs.new-version }}
            ```
            
            See [CHANGELOG.md](CHANGELOG.md) for detailed changes.
          draft: false
          prerelease: false