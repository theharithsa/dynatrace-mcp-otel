name: Version Validation

on:
  pull_request:
    branches: [dev]

jobs:
  validate-version:
    runs-on: ubuntu-latest
    environment: NPM Deploy  # Add environment access for OTel variables
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Debug Environment Variables
        run: |
          echo "üîç Checking environment variables..."
          echo "OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT:-'NOT SET'}"
          echo "DYNATRACE_API_TOKEN: ${DYNATRACE_API_TOKEN:+SET}"
          echo "DYNATRACE_LOG_INGEST_URL: ${DYNATRACE_LOG_INGEST_URL:-'NOT SET'}"
        env:
          OTEL_EXPORTER_OTLP_ENDPOINT: ${{ vars.OTEL_EXPORTER_OTLP_ENDPOINT }}
          DYNATRACE_API_TOKEN: ${{ secrets.DYNATRACE_API_TOKEN }}
          DYNATRACE_LOG_INGEST_URL: ${{ vars.DYNATRACE_LOG_INGEST_URL }}

      - name: Setup OpenTelemetry
        uses: ./.github/actions/setup-otel
        with:
          job-name: 'validate-version'
          otel-endpoint: ${{ vars.OTEL_EXPORTER_OTLP_ENDPOINT }}
          dynatrace-api-token: ${{ secrets.DYNATRACE_API_TOKEN }}
          dynatrace-log-url: ${{ vars.DYNATRACE_LOG_INGEST_URL }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install semver for validation
        uses: ./.github/actions/otel-step
        with:
          step-name: 'install-semver'
          dynatrace-log-url: ${{ vars.DYNATRACE_LOG_INGEST_URL }}
          dynatrace-api-token: ${{ secrets.DYNATRACE_API_TOKEN }}
          command: 'npm install -g semver'

      - name: Validate version bump
        uses: ./.github/actions/otel-step
        with:
          step-name: 'validate-version-bump'
          command: |
            # Get current version
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            echo "PR version: $CURRENT_VERSION"
            
            # Get main branch version
            git fetch origin main
            MAIN_VERSION=$(git show origin/main:package.json | node -p "JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf8')).version")
            echo "Main version: $MAIN_VERSION"
            
            if semver -r ">$MAIN_VERSION" "$CURRENT_VERSION"; then
              echo "‚úÖ Version correctly incremented from $MAIN_VERSION to $CURRENT_VERSION"
            elif [ "$CURRENT_VERSION" = "$MAIN_VERSION" ]; then
              echo "‚ÑπÔ∏è Version unchanged ($CURRENT_VERSION) - NPM publish will be skipped"
            else
              echo "‚ùå Invalid version bump: $CURRENT_VERSION is not greater than $MAIN_VERSION"
              exit 1
            fi

      - name: Check package.json format
        uses: ./.github/actions/otel-step
        with:
          step-name: 'check-package-format'
          command: |
            node -e "
              const pkg = require('./package.json');
              const required = ['name', 'version', 'description', 'main', 'author'];
              const missing = required.filter(field => !pkg[field]);
              if (missing.length > 0) {
                console.error('‚ùå Missing required package.json fields:', missing.join(', '));
                process.exit(1);
              }
              console.log('‚úÖ Package.json has all required fields for NPM publishing');
            "